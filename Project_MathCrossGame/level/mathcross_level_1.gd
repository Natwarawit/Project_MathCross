extends Control 

@onready var inv: Inv = preload("res://inventory/playerinv.tres")
@onready var grid_container = $GridContainer
@onready var choices_container = $ChoiceContainer
@onready var hint_button = $HintButton
@onready var next_grid_button = $NextGridButton
@onready var back_button = $BackButton
@onready var setting = $Setting
@export var qid = 0

var correct_answer = []
var current_grid_index = 0
var used_grid_indexes = []
var selected_number = null
var time_remaining = 60 # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
var time_bonus = 5  # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
var score = 0
var correct_answers = 0
var combo_bonus = 10  
var power_up_threshold = 50 
var hints_available = 80 
var freeze_available = 3 
var previous_selected_number = null
var last_pressed_button = null
var timer_running = true
var grid = []
var choices = []
var check_for_horizontal = []
var check_for_vertical = []

func _ready():
	for i in range(1, 100):  # ‡πÉ‡∏ä‡πâ range(start, end) ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1 ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á 99
		correct_answer.append(i)
	print(correct_answer)
	
	switch_to_next_grid()
	$ImportQuestion.request("https://raw.githubusercontent.com/Natwarawit9025/mathcross/refs/heads/main/data/level"+ str(qid) +".json")
	$ImportChoice.request("https://raw.githubusercontent.com/Natwarawit9025/mathcross/refs/heads/main/data/choice"+ str(qid) +".json")
	$ImportCheckHorizontal.request("https://raw.githubusercontent.com/Natwarawit9025/mathcross/refs/heads/main/data/check_horizontal"+ str(qid) +".json")
	$ImportCheckVertical.request("https://raw.githubusercontent.com/Natwarawit9025/mathcross/refs/heads/main/data/check_vertical"+ str(qid) +".json")

func set_up_grid() -> void:
	for child in grid_container.get_children():
		child.queue_free()

	for row in range(grid[current_grid_index].size()):
		var row_container = HBoxContainer.new()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß
		for col in range(grid[current_grid_index][row].size()):
			var value = grid[current_grid_index][row][col]
			var btn = Button.new() 
			btn.modulate = Color(0.3, 0.8, 1.0)

			if value != null:
				btn.text = str(value)
				if typeof(value) != TYPE_STRING:
					btn.text = str(int(value))  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°
				elif value in ["+","-","*","/","="]:
					btn.modulate = Color(1, 1, 0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô + ‡∏´‡∏£‡∏∑‡∏≠ =:
				elif btn.text == "":
					btn.disabled = true  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏á
			else:
				btn.connect("pressed", Callable(self, "_on_grid_button_pressed").bind(row, col, btn))  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
				btn.modulate = Color(0.4, 1.5, 1.0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏á

			btn.custom_minimum_size = Vector2(50, 50)  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°
			row_container.add_child(btn)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß
		grid_container.add_child(row_container)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
func set_up_choices() -> void:
	for child in choices_container.get_children():
		child.queue_free()  # ‡∏•‡∏ö‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå
	for choice in choices[current_grid_index]:
		var btn = Button.new()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
		btn.text = str(choice)
		btn.connect("pressed", Callable(self, "_on_choice_button_pressed").bind(choice, btn))  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
		btn.modulate = Color(0.3, 0.8, 1.0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
		btn.custom_minimum_size = Vector2(70, 70)
		choices_container.add_child(btn)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÅ‡∏õ‡πâ‡∏ô
func select_choice(choice: int) -> void:
	if choice in choices[current_grid_index]:
		selected_number = choice  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
		# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
		for btn in choices_container.get_children():
			if btn.text == str(selected_number):
				btn.disabled = true  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
				btn.modulate = Color(0.3, 0.8, 1.0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
			else:
				btn.disabled = false  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
				btn.modulate = Color(0.3, 0.8, 1.0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥

func _on_choice_button_pressed(choice, btn):
	selected_number = choice  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
	
	if last_pressed_button != null:
		last_pressed_button.modulate = Color(0, 1, 0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
		last_pressed_button.disabled = false  # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏°
	
	btn.disabled = true  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
	btn.modulate = Color(1, 1, 1)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
	last_pressed_button = btn
	
	if !check_correct(selected_number):  # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
		btn.modulate = Color(1, 0, 0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á
	else:
		btn.modulate = Color(0, 1, 0)  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≥‡∏ô‡∏ß‡∏ô coin_fix ‡πÉ‡∏ô inv_misc ===
func get_coin_fix_count() -> int:
	var inv_ui = $"../player/Inv_UI2"# üëà ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ node ‡∏ä‡∏∑‡πà‡∏≠ Inv_UI ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏° ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
	if inv_ui == null:
		print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Inv_UI")
		return 0
	
	# ‡πÉ‡∏ä‡πâ inv_misc ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô coin_fix
	for invslot in inv_ui.inv_misc.slots:
		if invslot != null and invslot.item != null and invslot.item.name == "coin_fix":
			return invslot.amount
	return 0


# === ‡πÉ‡∏ä‡πâ coin_fix ‡∏à‡∏≤‡∏Å inv_misc ===
func use_coin_fix() -> bool:
	var inv_ui = $"../player/Inv_UI2"  # üëà ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
	if inv_ui == null:
		print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Inv_UI")
		return false

	var count = get_coin_fix_count()
	if count > 0:
		inv_ui.remove_item_from_inventory_misc("coin_fix")  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô inventory.gd ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
		print("‚úÖ ‡πÉ‡∏ä‡πâ coin_fix ‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:", count - 1)
		return true
	else:
		print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ coin_fix ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ")
		return false

func _on_grid_button_pressed(row, col, btn): 
	# ‡∏ñ‡πâ‡∏≤‡∏ß‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏•‡∏á‡πÑ‡∏õ
	if selected_number != null and grid[current_grid_index][row][col] == null:
		grid[current_grid_index][row][col] = selected_number
		btn.text = str(selected_number)
		
		choices[current_grid_index].erase(selected_number)
		set_up_choices()

		# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å/‡∏ú‡∏¥‡∏î
		if is_valid_move(row, col):
			btn.modulate = Color(0, 1, 0)  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å
			check_and_disable_buttons(row, col)
		else:
			btn.modulate = Color(1, 0, 0)  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î

		# ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
		if all_cells_filled():
			if check_win_condition():
				show_correct()
				switch_to_next_grid()
			else:
				show_loss_message()

	# ‡∏ñ‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏¥‡∏î 
	elif grid[current_grid_index][row][col] != null:
		var value = grid[current_grid_index][row][col]

		if is_valid_move(row, col):
			# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡∏π‡∏Å ‚Üí ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥
			grid[current_grid_index][row][col] = null
			btn.text = ""
			btn.modulate = Color(0, 2, 0)  # ‡∏™‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥

			# ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á inventory
			$"../player/Inv_UI2".add_choice_to_inventory(value)

			# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ choices
			if not (value in choices[current_grid_index]):
				choices[current_grid_index].append(value)
				choices[current_grid_index].sort()

			set_up_choices()
			check_and_disable_buttons(row, col)
			print("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡∏π‡∏Å ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏•‡∏î coin_fix")

		else:
			# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ú‡∏¥‡∏î ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ coin_fix
			if get_coin_fix_count() > 0:
				use_coin_fix()
				grid[current_grid_index][row][col] = null
				btn.text = ""
				btn.modulate = Color(0, 2, 0)

				$"../player/Inv_UI2".add_choice_to_inventory(value)
				
				if not (value in choices[current_grid_index]):
					choices[current_grid_index].append(value)
					choices[current_grid_index].sort()

				set_up_choices()
				check_and_disable_buttons(row, col)
				print("‡πÉ‡∏ä‡πâ coin_fix ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡∏≠‡∏≠‡∏Å ‡πÄ‡∏´‡∏•‡∏∑‡∏≠:", get_coin_fix_count())
			else:
				print("‡πÑ‡∏°‡πà‡∏°‡∏µ coin_fix ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
				btn.modulate = Color(1, 0, 0)  # ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏™‡∏µ‡πÅ‡∏î‡∏á



# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
func is_valid_move(row: int, col: int) -> bool:
	return check_horizontal() and check_vertical()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
func check_horizontal() -> bool:
	var checks = [
		[[1, 0, 2, 28]],  # ‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡πà 1
		[[0, 1, 3, 17], [3, 0, 2, 11]], # ‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡πà 2
		[[0, 3, 5, 7, 16], [3, 0, 2, 4,20]], # ‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡πà 3
	]
	
	for check in check_for_horizontal[current_grid_index]:
		if check.size() < 4:
			continue

		var row = check[0]
		var value1 = grid[current_grid_index][row][check[1]]
		var value2 = grid[current_grid_index][row][check[2]]

		if typeof(value1) == TYPE_STRING: value1 = int(value1)
		if typeof(value2) == TYPE_STRING: value2 = int(value2)

		# ==== ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏£‡∏ß‡∏à 2 ‡∏ï‡∏±‡∏ß ====
		if check.size() == 4:
			var result = check[3]
			if typeof(result) == TYPE_STRING: result = int(result)
			
			if value1 == null or value2 == null:
				continue

			if not (
				value1 + value2 == result
				or value1 - value2 == result
				or value1 * value2 == result
				or (value2 != 0 and value1 / value2 == result)
			):
				print("‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏ú‡∏¥‡∏î:", check, "‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà:", value1, value2, "‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ:", result)
				return false

		# ==== ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏£‡∏ß‡∏à 3 ‡∏ï‡∏±‡∏ß ====
		elif check.size() == 5:
			var value3 = grid[current_grid_index][row][check[3]]
			var result = check[4]

			if typeof(value3) == TYPE_STRING: value3 = int(value3)
			if typeof(result) == TYPE_STRING: result = int(result)
			
			if value1 == null or value2 == null or value3 == null:
				continue

			if not (
				value1 + value2 + value3 == result
				or value1 - value2 - value3 == result
				or value1 * value2 * value3 == result
				or (value2 != 0 and value3 != 0 and value1 / value2 / value3 == result)
			):
				print("‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏ú‡∏¥‡∏î‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3:", check, "‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà:", value1, value2, value3, "‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ:", result)
				return false

	return true


func check_vertical() -> bool:
	var checks = [
		[[]],  # ‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡πà 1
		[[1, 2, 4, 7], [3, 0, 2, 13]], # ‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡πà 2
		[[1, 2, 4, 7], [5, 0, 2, 13]], # ‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡πà 3
	]
	
	for check in check_for_vertical[current_grid_index]:
		if check.size() < 4:
			continue

		var col = check[0]
		var row1 = check[1]
		var row2 = check[2]
		var value1 = grid[current_grid_index][row1][col]
		var value2 = grid[current_grid_index][row2][col]

		if typeof(value1) == TYPE_STRING: value1 = int(value1)
		if typeof(value2) == TYPE_STRING: value2 = int(value2)

		# ==== ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏£‡∏ß‡∏à 2 ‡∏ï‡∏±‡∏ß ====
		if check.size() == 4:
			print(check.size())
			var result = check[3]
			if typeof(result) == TYPE_STRING: result = int(result)

			if value1 == null or value2 == null:
				continue

			if not (
				value1 + value2 == result
				or value1 - value2 == result
				or value1 * value2 == result
				or (value2 != 0 and value1 / value2 == result)
			):
				return false

		# ==== ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏£‡∏ß‡∏à 3 ‡∏ï‡∏±‡∏ß ====
		elif check.size() == 5:
			var value3 = grid[current_grid_index][check[3]][col]
			var result = check[4]

			if typeof(value3) == TYPE_STRING: value3 = int(value3)
			if typeof(result) == TYPE_STRING: result = int(result)

			if value1 == null or value2 == null or value3 == null:
				continue

			if not (
				value1 + value2 + value3 == result
				or value1 - value2 - value3 == result
				or value1 * value2 * value3 == result
				or (value2 != 0 and value3 != 0 and value1 / value2 / value3 == result)
			):
				return false
	return true

func _on_hint_button_pressed() -> void:
	if hints_available > 0:  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
		give_hint()  # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
		hints_available -= 1  # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
	else:
		show_hint_message("No hints left!")  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
func give_hint() -> void:
	for choice in choices[current_grid_index]:  # ‡πÉ‡∏ä‡πâ current_grid_index
		for row in range(grid[current_grid_index].size()):  # ‡πÉ‡∏ä‡πâ current_grid_index
			for col in range(grid[current_grid_index][row].size()):  # ‡πÉ‡∏ä‡πâ current_grid_index
				if grid[current_grid_index][row][col] == null:  # ‡∏ñ‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
					grid[current_grid_index][row][col] = choice  # ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
					if check_horizontal() and check_vertical():  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
						choices[current_grid_index].erase(choice)  # ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
						set_up_choices()  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
						set_up_grid()  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á

						if all_cells_filled():
							if check_win_condition():
								show_victory_message()
						return
					else:
						grid[current_grid_index][row][col] = null  # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
	show_hint_message("No valid hints available.")  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ä‡∏ô‡∏∞
func check_win_condition() -> bool:
	return check_horizontal() and check_vertical()  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func all_cells_filled() -> bool:
	for row in grid[current_grid_index]:
		for element in row:
			if element == null:
				return false
	return true

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func all_cells_in_row_filled(row: int) -> bool:
	for col in range(grid[current_grid_index][row].size()):
		if grid[current_grid_index][row][col] == null:
			return false
	return true

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func all_cells_in_column_filled(col: int) -> bool:
	for row in range(grid[current_grid_index].size()):
		if grid[current_grid_index][row][col] == null:
			return false
	return true

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func has_active_in_row(row: int) -> bool:
	for col in range(grid[current_grid_index][row].size()):
		if grid[current_grid_index][row][col] in ['+', '-', '*', '/', '=']:
			return true
	return false

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func has_active_in_column(col: int) -> bool:
	for row in range(grid[current_grid_index].size()):
		if grid[current_grid_index][row][col] in ['+', '-', '*', '/', '=']:
			return true
	return false

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
func disable_buttons_in_row(row: int):
	for col in range(grid[current_grid_index][row].size()):
		if grid[current_grid_index][row][col] != null:
			var btn = grid_container.get_child(row).get_child(col)
			if btn and not btn.disabled:
				btn.disabled = false
				btn.modulate = Color(0, 1, 0)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
func disable_buttons_in_column(col: int):
	for row in range(grid[current_grid_index].size()):
		if grid[current_grid_index][row][col] != null:
			var btn = grid_container.get_child(row).get_child(col)
			if btn and not btn.disabled:
				btn.disabled = false
				btn.modulate = Color(0, 1, 0)

func enable_buttons_in_row(row: int): 
	for col in range(grid[current_grid_index][row].size()):
		if grid[current_grid_index][row][col] != null:
			var btn = grid_container.get_child(row).get_child(col)
			if btn and not btn.disabled:
				btn.disabled = false

				# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cell ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå (+, -, *, /, =)
				var value = grid[current_grid_index][row][col]
				if value in ["+", "-", "*", "/", "="]:
					btn.modulate = Color(1, 1, 0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
				else:
					btn.modulate = Color(0.3, 0.8, 1.0)

func enable_buttons_in_column(col: int):
	for row in range(grid[current_grid_index].size()):
		if grid[current_grid_index][row][col] != null:
			var btn = grid_container.get_child(row).get_child(col)
			if btn and not btn.disabled:
				btn.disabled = false

				# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cell ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå (+, -, *, /, =)
				var value = grid[current_grid_index][row][col]
				if value in ["+", "-", "*", "/", "="]:
					btn.modulate = Color(1, 1, 0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
				else:
					btn.modulate = Color(0.3, 0.8, 1.0)


# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô check_and_disable_buttons
func check_and_disable_buttons(row: int, col: int) -> void:
	# ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ñ‡∏ß) ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á (‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)
	if is_row_fully_correct(row):
		if has_active_in_row(row):
			print("‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô row =", row)
			disable_buttons_in_row(row)
			return
	
	elif is_column_fully_correct(col):
		if has_active_in_column(col):
			print("‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á col =", col)
			disable_buttons_in_column(col)
			return
	
	#‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
	if has_active_in_row(row):
		enable_buttons_in_row(row)

	elif has_active_in_column(col):
		enable_buttons_in_column(col)

# ==== ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå ====
func is_row_fully_correct(row: int) -> bool:
	var has_check := false
	for check in get_horizontal_checks():
		if check[0] == row:
			has_check = true
			if not is_horizontal_check_correct(check):
				return false  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å ‚Üí ‡∏´‡πâ‡∏≤‡∏°‡∏õ‡∏¥‡∏î
	return has_check  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÇ‡∏à‡∏ó‡∏¢‡πå ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏ö

# ==== ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå ====
func is_column_fully_correct(col: int) -> bool:
	var has_check := false
	for check in get_vertical_checks():
		if check[0] == col:
			has_check = true
			if not is_vertical_check_correct(check):
				return false  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å ‚Üí ‡∏´‡πâ‡∏≤‡∏°‡∏õ‡∏¥‡∏î
	return has_check  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÇ‡∏à‡∏ó‡∏¢‡πå ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏£‡∏ö

# ==== ‡∏ï‡∏£‡∏ß‡∏à‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ check ====
func is_horizontal_check_correct(check: Array) -> bool:
	if check.size() == 4:
		# ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ 2 ‡∏ä‡πà‡∏≠‡∏á (value1 + value2 == result)
		var row = check[0]
		var col1 = check[1]
		var col2 = check[2]
		var result = check[3]
		
		var value1 = grid[current_grid_index][row][col1]
		var value2 = grid[current_grid_index][row][col2]
		
		if value1 == null or value2 == null:
			return false
		
		return (
			value1 + value2 == result
			or value1 - value2 == result
			or value1 * value2 == result
			or (value2 != 0 and value1 / value2 == result)
		)
	
	elif check.size() == 5:
		# ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ 3 ‡∏ä‡πà‡∏≠‡∏á (value1 + value2 + value3 == result)
		var row = check[0]
		var col1 = check[1]
		var col2 = check[2]
		var col3 = check[3]
		var result = check[4]
		
		var value1 = grid[current_grid_index][row][col1]
		var value2 = grid[current_grid_index][row][col2]
		var value3 = grid[current_grid_index][row][col3]
		
		if value1 == null or value2 == null or value3 == null:
			return false
		
		return (
			value1 + value2 + value3 == result
			or value1 - value2 - value3 == result
			or value1 * value2 * value3 == result
			or (value2 != 0 and value3 != 0 and value1 / value2 / value3 == result)
		)
	
	else:
		return false


# ==== ‡∏ï‡∏£‡∏ß‡∏à‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡∏•‡∏∞ check ====
func is_vertical_check_correct(check: Array) -> bool:
	if check.size() == 4:
		# --- ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ 2 ‡∏ä‡πà‡∏≠‡∏á (value1 + value2 == result) ---
		var col = check[0]
		var row1 = check[1]
		var row2 = check[2]
		var result = check[3]
		
		var value1 = grid[current_grid_index][row1][col]
		var value2 = grid[current_grid_index][row2][col]
		
		if value1 == null or value2 == null:
			return false
		
		return (
			value1 + value2 == result
			or value1 - value2 == result
			or value1 * value2 == result
			or (value2 != 0 and value1 / value2 == result)
		)
	
	elif check.size() == 5:
		# --- ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ 3 ‡∏ä‡πà‡∏≠‡∏á (value1 + value2 + value3 == result) ---
		var col = check[0]
		var row1 = check[1]
		var row2 = check[2]
		var row3 = check[3]
		var result = check[4]
		
		var value1 = grid[current_grid_index][row1][col]
		var value2 = grid[current_grid_index][row2][col]
		var value3 = grid[current_grid_index][row3][col]
		
		if value1 == null or value2 == null or value3 == null:
			return false
		
		return (
			value1 + value2 + value3 == result
			or value1 - value2 - value3 == result
			or value1 * value2 * value3 == result
			or (value2 != 0 and value3 != 0 and value1 / value2 / value3 == result)
		)
	
	else:
		return false


# helper: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
func get_horizontal_checks() -> Array:
	return check_for_horizontal[current_grid_index]

# helper: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
func get_vertical_checks() -> Array:
	return check_for_vertical[current_grid_index]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏ô‡∏∞
func show_victory_message():
	var victory_label = Label.new()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ‡πÉ‡∏´‡∏°‡πà
	victory_label.text = "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß!"  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	victory_label.modulate = Color(0, 1, 0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	add_child(victory_label)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Label ‡πÉ‡∏ô Scene

	# ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö Label
	await get_tree().create_timer(3).timeout
	victory_label.queue_free()  # ‡∏•‡∏ö Label
	$"../portal".visible = true

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏û‡πâ
func show_loss_message():
	var loss_label = Label.new()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ‡πÉ‡∏´‡∏°‡πà
	loss_label.text = "You Lose!"  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	loss_label.modulate = Color(1, 0, 0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	add_child(loss_label)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Label ‡πÉ‡∏ô Scene

	# ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö Label
	await get_tree().create_timer(3).timeout
	loss_label.queue_free()  # ‡∏•‡∏ö Label

func show_incorrect():
	var incorrect_label = Label.new()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ‡πÉ‡∏´‡∏°‡πà
	incorrect_label.text = "‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å"  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	incorrect_label.modulate = Color(1, 0, 0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	add_child(incorrect_label)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Label ‡πÉ‡∏ô Scene

	await get_tree().create_timer(1).timeout
	incorrect_label.queue_free()  # ‡∏•‡∏ö Label

func show_correct():
	var correct_label = Label.new()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ‡πÉ‡∏´‡∏°‡πà
	correct_label.text = "‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å"  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	correct_label.modulate = Color(0, 1, 0)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	add_child(correct_label)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° Label ‡πÉ‡∏ô Scene

	await get_tree().create_timer(1).timeout
	correct_label.queue_free()  # ‡∏•‡∏ö Label

func check_correct(selected_choice):
	return selected_choice in correct_answer

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
func show_hint_message(msg: String) -> void:
	var hint_label = Label.new()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ‡πÉ‡∏´‡∏°‡πà
	hint_label.text = msg  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	hint_label.modulate = Color(1, 1, 0)  
	add_child(hint_label)
	await get_tree().create_timer(3).timeout
	hint_label.queue_free()

func show_completion_message():
	var completion_label = Label.new()
	completion_label.text = "Congratulations! You completed all grids!"
	completion_label.modulate = Color(0, 1, 0)
	add_child(completion_label)
	
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô recursive ‡πÅ‡∏õ‡∏•‡∏á float -> int
func convert_floats_to_int(data):
	if data is Array:
		var new_array = []
		for v in data:
			new_array.append(convert_floats_to_int(v))
		return new_array
	elif data is Dictionary:
		var new_dict = {}
		for k in data.keys():
			new_dict[k] = convert_floats_to_int(data[k])
		return new_dict
	elif typeof(data) == TYPE_FLOAT:
		# ‡πÅ‡∏õ‡∏•‡∏á float ‡πÄ‡∏õ‡πá‡∏ô int
		return int(data)
	else:
		return data

func switch_to_next_grid():
	# ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å grid ‡πÅ‡∏•‡πâ‡∏ß
	if used_grid_indexes.size() >= grid.size():
		#show_completion_message()
		return

	for i in range(grid.size()):
		if not (i in used_grid_indexes):
			current_grid_index = i+1
			used_grid_indexes.append(i+1)
			if used_grid_indexes.size() >= grid.size():
				show_victory_message()
			break

	print("Switching to grid index:", current_grid_index)
	await get_tree().create_timer(6.0).timeout
	set_up_grid()
	set_up_choices()

func _on_http_request_request_completed(result, response_code, headers, body):
	if result == $ImportQuestion.RESULT_SUCCESS and response_code == 200:
		var json_string = body.get_string_from_utf8()
		var parse_result = JSON.parse_string(json_string)
		if parse_result:
			grid = convert_floats_to_int(parse_result)
			print("JSON data loaded:", grid)
			set_up_grid()
			print("Grid size:", grid.size()) # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
			return grid   # <== return ‡∏Ñ‡πà‡∏≤ grid ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ (‡πÅ‡∏°‡πâ engine ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠)
			
	else:
		print("HTTP request failed with code:", response_code)
		return []

func _on_http_request_2_request_completed(result, response_code, headers, body): 
	if result == $ImportChoice.RESULT_SUCCESS and response_code == 200:
		var json_string = body.get_string_from_utf8()
		var parse_result = JSON.parse_string(json_string)
		if parse_result:
			choices = convert_floats_to_int(parse_result)
			print("JSON data loaded:", choices)
			set_up_choices()
			print("Choices size:", choices.size())
			return choices
	else:
		print("HTTP request failed with code:", response_code)
		return []


func _on_import_check_horizontal_request_completed(result, response_code, headers, body):
	if result == $ImportCheckHorizontal.RESULT_SUCCESS and response_code == 200:
		var json_string = body.get_string_from_utf8()
		var parse_result = JSON.parse_string(json_string)
		if parse_result:
			check_for_horizontal = convert_floats_to_int(parse_result)
			print("JSON data loaded:", check_for_horizontal)
			print("Check_Horizontal Size:", check_for_horizontal.size())
			return check_for_horizontal
	else:
		print("HTTP request failed with code:", response_code)
		return []


func _on_import_check_vertical_request_completed(result, response_code, headers, body):
	if result == $ImportCheckVertical.RESULT_SUCCESS and response_code == 200:
		var json_string = body.get_string_from_utf8()
		var parse_result = JSON.parse_string(json_string)
		if parse_result:
			check_for_vertical = convert_floats_to_int(parse_result)
			print("JSON data loaded:", check_for_vertical)
			print("Check_Vertical Size:", check_for_vertical.size())
			return check_for_vertical
	else:
		print("HTTP request failed with code:", response_code)
		return []
