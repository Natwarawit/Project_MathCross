extends CharacterBody2D

const speed = 80
var health = 100
var attack = 30
var def = 0
var current_dir = "none"
var enemy_inattack_range = false
var enemy_attack_cooldown = true
var player_alive = true
var attack_ip = false
var skill_cooldown_time = 5
var skill_cooldown_timer = 0
var can_use_skill = true


@export var inv: Inv   # ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏≤‡∏Å Inv node ‡πÉ‡∏ô Inspector ‡∏°‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
@onready var head = $CanvasLayer/HelmetBlack

# -------- ‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò --------
var using_bow: bool = false   # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∑‡∏≠‡∏ò‡∏ô‡∏π

func _ready():
	health = global.max_health
	$AnimatedSprite2D.play("front_idle")
	$Bow.visible = using_bow
	
	# ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏Å‡∏ñ‡πâ‡∏≤ global ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠
	print("Helmet type from global: ", global.helmet_type)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤
	if global.player_has_helmet:
		var helmet_type = global.helmet_type
		helmet_show(helmet_type)  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏°‡∏ß‡∏Å

func _physics_process(delta):
	player_movement(delta)
	enemy_attack()
	eatapple()
	update_health()
	handle_combat()
	skill()
	
	if health <= 0:
		player_alive = false 
		health = 0
		print("player has been killed")
		$AnimatedSprite2D.play("death")
		$Label.text = "YOU DEATH"

		for enemy in get_tree().get_nodes_in_group("enemies"):
			enemy.player_is_dead = true

		await get_tree().create_timer(3).timeout
		self.queue_free()
	
	if not can_use_skill:
		skill_cooldown_timer -= delta
		# ‡∏ï‡∏±‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
		var cooldown = int(ceil(max(skill_cooldown_timer, 0)))
		
		# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà cooldown > 0
		if cooldown > 0:
			$Label.text = "Skill Cooldown " + str(cooldown)
		else:
			$Label.text = ""  # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

		if skill_cooldown_timer <= 0:
			can_use_skill = true



# -------- ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß --------
func player_movement(delta):
	if Input.is_action_pressed("d"):
		current_dir = "right"
		play_anim(1)
		velocity.x = speed
		velocity.y = 0
	elif Input.is_action_pressed("a"):
		current_dir = "left"
		play_anim(1)
		velocity.x = -speed
		velocity.y = 0
	elif Input.is_action_pressed("s"):
		current_dir = "down"
		play_anim(1)
		velocity.y = speed
		velocity.x = 0
	elif Input.is_action_pressed("w"):
		current_dir = "up"
		play_anim(1)
		velocity.y = -speed
		velocity.x = 0
	else:
		play_anim(0)
		velocity.x = 0
		velocity.y = 0
	
	move_and_slide()

func play_anim(movement):
	var dir = current_dir
	var anim = $AnimatedSprite2D
	
	if dir == "right":
		anim.flip_h = false
		if movement == 1:
			anim.play("side_walk")
		elif movement == 0 and not attack_ip:
			anim.play("side_idle")

	if dir == "left":
		anim.flip_h = true
		if movement == 1:
			anim.play("side_walk")
		elif movement == 0 and not attack_ip:
			anim.play("side_idle")

	if dir == "down":
		anim.flip_h = true
		if movement == 1:
			anim.play("front_walk")
		elif movement == 0 and not attack_ip:
			anim.play("front_idle")

	if dir == "up":
		anim.flip_h = true
		if movement == 1:
			anim.play("back_walk")
		elif movement == 0 and not attack_ip:
			anim.play("back_idle")

# -------- ‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ --------
func handle_combat():
	# ‡∏™‡∏•‡∏±‡∏ö‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò
	if Input.is_action_just_pressed("switch_weapon"): # R
		using_bow = !using_bow
		$Bow.visible = using_bow
		print("Now using bow:", using_bow)

	# ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏î‡∏≤‡∏ö
	if not using_bow and Input.is_action_just_pressed("attack"):
		sword_attack()

	# ‡∏¢‡∏¥‡∏á‡∏ò‡∏ô‡∏π
	if using_bow and Input.is_action_just_pressed("shoot"):
		$Bow.shoot_arrow()

func sword_attack():
	var dir = current_dir
	$soundattack.play()
	global.player_current_attack = true
	attack_ip = true

	match dir:
		"right":
			$AnimatedSprite2D.flip_h = false
			$AnimatedSprite2D.play("side_attack")
		"left":
			$AnimatedSprite2D.flip_h = true
			$AnimatedSprite2D.play("side_attack")
		"down":
			$AnimatedSprite2D.play("front_attack")
		"up":
			$AnimatedSprite2D.play("back_attack")

	$deal_attack_timer.start()

func _on_deal_attack_timer_timeout():
	$deal_attack_timer.stop()
	global.player_current_attack = false
	attack_ip = false

# -------- ‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÇ‡∏à‡∏°‡∏ï‡∏µ --------
func _on_player_hitbox_body_entered(body):
	if body.has_method("enemy"):
		enemy_inattack_range = true

func _on_player_hitbox_body_exited(body):
	if body.has_method("enemy"):
		enemy_inattack_range = false


func flash_red():
	var sprite = $AnimatedSprite2D
	sprite.modulate = Color(1, 0, 0)
	await get_tree().create_timer(0.2).timeout
	sprite.modulate = Color(1, 1, 1)


func enemy_attack():
	if enemy_inattack_range and enemy_attack_cooldown:
		var damage = 0
		if global.enemy_attacker != null:
			var enemy_attack = global.enemy_attacker.attack
			damage = enemy_attack - def

		flash_red()
		health -= damage
		enemy_attack_cooldown = false
		$attack_cooldown.start()
		print("Player ‡∏ñ‡∏π‡∏Å‡∏ï‡∏µ! damage =", damage, " HP ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ =", health)
		$hurt.play()

func _on_attack_cooldown_timeout():
	enemy_attack_cooldown = true

# -------- ‡∏™‡∏Å‡∏¥‡∏• --------
func skill():
	if Input.is_action_just_pressed("E"):
		if can_use_skill:
			global.player_current_attack = true
			attack_ip = true

			match current_dir:
				"right", "left":
					$AnimatedSprite2D.play("skill_attack")
				"down":
					$AnimatedSprite2D.play("front_skill_attack")
				"up":
					$AnimatedSprite2D.play("back_skill_attack")

			$deal_attack_timer.start()
			can_use_skill = false
			skill_cooldown_timer = skill_cooldown_time
			$soundattack.play()
			await get_tree().create_timer(0.2).timeout
			$soundattack.play()
		else:
			$Label.text = "Skill Cooldown"

# -------- Health Bar --------
func update_health(): 
	# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô max_health
	var clamped_health = min(health, global.max_health)

	# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÅ‡∏ñ‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
	var healthbar = $healthbarcanvas/healthbar
	$healthbarcanvas/Label2.text = str(clamped_health) + "/" + str(global.max_health)
	healthbar.value = clamped_health
	healthbar.max_value = global.max_health  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ clamped_health ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ñ‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏î
	healthbar.visible = true
	
# -------- Item / Apple --------
func collect(item):
	if item == null:
		return
	print("Collecting item:", item.name)

	if $Inv_UI == null:
		print("ERROR: Inv_UI not found")
		return

	# ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó item
	if item.name.begins_with("‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç "):
		$Inv_UI.inv_main.insert(item)
		print("‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ inv_main (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)")
	else:
		$Inv_UI.inv_misc.insert(item)
		print("‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ inv_misc (coin/apple/fixcoin)")


func eatapple():
	if Input.is_action_just_pressed("Q"): 
		eat()

func eat():
	var inv_ui = $Inv_UI  # üëà ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ node ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô scene ‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏ä‡πà‡∏ô Inventory ‡∏´‡∏£‡∏∑‡∏≠ Inv_UI)

	if inv_ui == null:
		print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Inv_UI")
		return

	# === ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≥‡∏ô‡∏ß‡∏ô apple_ ‡πÉ‡∏ô inv_misc ===
	var apple_count := 0
	for invslot in inv_ui.inv_misc.slots:
		if invslot != null and invslot.item != null and invslot.item.name == "apple_":
			apple_count = invslot.amount
			break

	if apple_count > 0:
		# ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•‡∏•‡∏á 1
		inv_ui.set_item_count_misc("apple_", apple_count - 1)

		# ‡∏ü‡∏∑‡πâ‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100)
		health = min(global.max_health, health + 20)
		print("üçé ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏¥‡∏ô‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•‡πÅ‡∏•‡πâ‡∏ß! ‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô:", health)

		# ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏ö item ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å inventory
		if apple_count - 1 <= 0:
			inv_ui.remove_item_from_inventory_misc("apple_")
	else:
		print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡∏¥‡πâ‡∏•‡πÉ‡∏ô inventory")

func helmet_show(helmet_type: String): 
	if head != null:
		head.visible = true
		
		# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
		match helmet_type:
			"‡∏´‡∏°‡∏ß‡∏Å‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á":
				global.max_health = 150  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô 150
				global.helmet_type = "‡∏´‡∏°‡∏ß‡∏Å‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á"
				$CanvasLayer/HelmetBlack.texture = preload("res://image/armor/helmet/copper_helmet.png")
			"‡∏´‡∏°‡∏ß‡∏Å‡πÄ‡∏´‡∏•‡πá‡∏Å":
				global.max_health = 200  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô 200
				global.helmet_type = "‡∏´‡∏°‡∏ß‡∏Å‡πÄ‡∏´‡∏•‡πá‡∏Å"
				$CanvasLayer/HelmetBlack.texture = preload("res://image/armor/helmet/iron_helmet.png")
			"‡∏´‡∏°‡∏ß‡∏Å‡∏ó‡∏≠‡∏á":
				global.max_health = 250  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô 250
				global.helmet_type = "‡∏´‡∏°‡∏ß‡∏Å‡∏ó‡∏≠‡∏á"
				$CanvasLayer/HelmetBlack.texture = preload("res://image/armor/helmet/gold_helmet.png")
			"‡∏´‡∏°‡∏ß‡∏Å‡πÄ‡∏û‡∏ä‡∏£":
				global.max_health = 300 
				global.helmet_type = "‡∏´‡∏°‡∏ß‡∏Å‡πÄ‡∏û‡∏ä‡∏£"
				$CanvasLayer/HelmetBlack.texture = preload("res://image/armor/helmet/diamond_helmet.png")
			_:
				print("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏°‡∏ß‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

		# ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï health ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô max_health ‡πÉ‡∏´‡∏°‡πà
		health = min(health, global.max_health)  
		
		# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
		update_health()
		
		print("‡∏´‡∏°‡∏ß‡∏Å " + helmet_type + " ‡∏ñ‡∏π‡∏Å‡∏™‡∏ß‡∏°‡πÉ‡∏™‡πà! ‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô ", global.max_health)
	else:
		print("‚ùå HelmetBlack node ‡πÑ‡∏°‡πà‡∏û‡∏ö")
func player():
	pass
